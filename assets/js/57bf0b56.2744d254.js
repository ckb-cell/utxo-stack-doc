"use strict";(self.webpackChunkutxo_stack_website=self.webpackChunkutxo_stack_website||[]).push([[156],{2288:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>l});var i=a(4848),t=a(8453);const c={sidebar_position:3},s="Branch Chain",r={id:"branch-chain",title:"Branch Chain",description:"A Branch chain is a Layer-2 chain that actually runs smart contracts. It is characterized by high TPS (Transactions Per Second), low fees, fewer block-producing nodes, and a challenge-based security model.",source:"@site/docs/branch-chain.md",sourceDirName:".",slug:"/branch-chain",permalink:"/docs/branch-chain",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docsSidebar",previous:{title:"light-client",permalink:"/docs/utxo-concepts/light-client"},next:{title:"DA Layer",permalink:"/docs/da-layer"}},o={},l=[{value:"Staking and Election",id:"staking-and-election",level:2},{value:"UTXO Isomorphism",id:"utxo-isomorphism",level:2},{value:"Cell Model",id:"cell-model",level:3},{value:"Turing-complete VM",id:"turing-complete-vm",level:3},{value:"Challenge Model",id:"challenge-model",level:2},{value:"Data Availability (DA) Issue",id:"data-availability-da-issue",level:3},{value:"Transaction Verification",id:"transaction-verification",level:3},{value:"Cross-chain Asset Transfer",id:"cross-chain-asset-transfer",level:2},{value:"Relevant RGB++ Contracts",id:"relevant-rgb-contracts",level:2},{value:"Customizing Branch Chains",id:"customizing-branch-chains",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"branch-chain",children:"Branch Chain"}),"\n",(0,i.jsx)(n.p,{children:"A Branch chain is a Layer-2 chain that actually runs smart contracts. It is characterized by high TPS (Transactions Per Second), low fees, fewer block-producing nodes, and a challenge-based security model."}),"\n",(0,i.jsx)(n.h2,{id:"staking-and-election",children:"Staking and Election"}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain uses multiple validators to produce blocks using a PBFT-like consensus mechanism. This multi-party block production can reduces censorship attacks and collusion by nodes."}),"\n",(0,i.jsxs)(n.p,{children:["A Proof of Work (POW) chain is introduced simultaneously as a consensus component. Each Branch chain needs to deploy an election contract on the RGB++ compatible PoW chain. The current validators of the Branch chain are determined by the election contract. By incorporating the PoW chain, ",(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Proof_of_stake#Long-range_attacks",children:"long-range attacks"})," and censorship attacks that are common in Proof of Stake (POS) systems can be avoided."]}),"\n",(0,i.jsx)(n.p,{children:"Node operators can participate in elections by staking assets and submitting them to the election contract on the RGB++ supported platform. Regular users can also vote for operators by staking their assets to help with the election and earn certain rewards."}),"\n",(0,i.jsx)(n.p,{children:"Elections are held for each Branch chain epoch, and the newly elected validators will produce blocks during the epoch."}),"\n",(0,i.jsx)(n.h2,{id:"utxo-isomorphism",children:"UTXO Isomorphism"}),"\n",(0,i.jsx)(n.h3,{id:"cell-model",children:"Cell Model"}),"\n",(0,i.jsx)(n.p,{children:"Branch chain employs an extended UTXO Cell model that is isomorphic to RGB++ compatible chains."}),"\n",(0,i.jsx)(n.p,{children:"Branch chain, RGB++ compatible chains, and Bitcoin all use UTXO-like structures. By utilizing UTXO-specific technologies like single-use seals and client-side verification (CSV), the assets can be cross-chained while ensuring security."}),"\n",(0,i.jsx)(n.h3,{id:"turing-complete-vm",children:"Turing-complete VM"}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain employs the same Turing-complete virtual machine (VM) based on RISC-V. This enables the execution of arbitrary complex logic and compatibility with RGB++ smart contracts."}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain contract is executed in a scripting VM based on the open source RISC-V ISA, which compatible with the RGB++ development toolchains. Therefore, any language with a compiler that supports the RISC-V ISA should be able to develop Branch chain contracts."}),"\n",(0,i.jsx)(n.h2,{id:"challenge-model",children:"Challenge Model"}),"\n",(0,i.jsx)(n.p,{children:"The security of the Branch chain is based on a challenge model."}),"\n",(0,i.jsx)(n.p,{children:"If an invalid block is produced, a challenger can discover the invalid block and submit a challenge proof to the challenge contract on a bound RGB++ compatible PoW chain within one challenge period."}),"\n",(0,i.jsx)(n.p,{children:"To implement the challenge mechanism, the following must be ensured:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The Challenger can obtain the complete data of blocks produced by the Branch chain validators within one challenge period."}),"\n",(0,i.jsx)(n.li,{children:"The challenge contract can verify Branch chain transactions."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"data-availability-da-issue",children:"Data Availability (DA) Issue"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.a,{href:"/docs/da-layer",children:"DA layer"})," is introduced to address the Data Availability (DA) issue."]}),"\n",(0,i.jsx)(n.p,{children:"On every RGB++ compatible chain, a Branch chain light client contract is maintained. This contract records all Branch chain headers."}),"\n",(0,i.jsx)(n.p,{children:"After a Branch chain block is produced, the Branch chain validator must submit the complete block to the DA layer and obtain a DA proof. Then, the block header and DA proof should be submitted to the light client contract to update the Branch chain state recorded on the bound PoW chain."}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain block is considered confirmed only after completing the above submissions. If a validator fails to update the light client contract for a prolonged period, the election contract will penalize the validator's staking and initiate a re-election process."}),"\n",(0,i.jsx)(n.p,{children:"When submitting a header, the DA layer verification contract checks the DA proof to ensure that the entire block has been stored in the DA layer for at least one challenge Period."}),"\n",(0,i.jsx)(n.p,{children:"Challengers can extract the complete block from the DA layer and generate challenge proofs when necessary."}),"\n",(0,i.jsx)(n.h3,{id:"transaction-verification",children:"Transaction Verification"}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain and the RGB++ compatible chains use the same cell model structure."}),"\n",(0,i.jsx)(n.p,{children:"Therefore, as long as all data (cells or block headers) that the Branch chain transaction depends on are provided, the Branch chain transaction can be verified on the bound RGB++ compatible chain."}),"\n",(0,i.jsxs)(n.p,{children:["For example, the ",(0,i.jsx)(n.code,{children:"ckb_spawn"})," and ",(0,i.jsx)(n.code,{children:"ckb_exec"})," syscalls can be used to construct a secure verification environment."]}),"\n",(0,i.jsx)(n.h2,{id:"cross-chain-asset-transfer",children:"Cross-chain Asset Transfer"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://github.com/nervosnetwork/rfcs/pull/428",children:"xUDT"})," is used to represent assets, with the asset contract deployed on a bound RGB++ compatible PoW chain. All Branch chain asset cells refer to the same xUDT contract. Hence, an xUDT cell on RGB++ compatible chains is equivalent."]}),"\n",(0,i.jsx)(n.p,{children:"Cross-chain asset transfer involves transferring the cell and completing the XUDT asset transfer."}),"\n",(0,i.jsx)(n.p,{children:"The concept of single-use seals is used to achieve cross-chain asset transfers."}),"\n",(0,i.jsx)(n.p,{children:"Two new operations are added to the current xUDT protocol:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"CSVBurn(X, src_chain_id, dst_chain_id, out_point)"})}),"\n",(0,i.jsxs)(n.p,{children:["The contract verifies that at least X amount of tokens are burned in this transaction. ",(0,i.jsx)(n.code,{children:"src_chain_id"})," is the ID of the current chain, and ",(0,i.jsx)(n.code,{children:"dst_chain_id"})," and ",(0,i.jsx)(n.code,{children:"out_point"})," specify an out point on another chain."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.code,{children:"CSVMint(X, burn_tx)"})}),"\n",(0,i.jsxs)(n.p,{children:["The contract verifies that ",(0,i.jsx)(n.code,{children:"burn_tx"})," exists and is confirmed on ",(0,i.jsx)(n.code,{children:"src_chain_id"})," (through Branch chain light client verification). The contract verifies that ",(0,i.jsx)(n.code,{children:"burn_tx.dst_chain_id"})," must be the current chain, and the inputs of the current transaction must include the ",(0,i.jsx)(n.code,{children:"out_point"})," specified in ",(0,i.jsx)(n.code,{children:"CSVBurn"}),". This transaction allows minting X amount of tokens."]}),"\n",(0,i.jsx)(n.p,{children:"As described, using the concept of single-use seals, the system supports decentralized cross-chain operations between Branch chains and RGB++ supported chains."}),"\n",(0,i.jsxs)(n.p,{children:["For cross-chain operations between Bitcoin and RGB++ compatible chains, please refer to the ",(0,i.jsx)(n.a,{href:"https://github.com/ckb-cell/RGBPlusPlus-design",children:"RGB++ protocol"})," documentation."]}),"\n",(0,i.jsx)(n.h2,{id:"relevant-rgb-contracts",children:"Relevant RGB++ Contracts"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Branch chain election contract"}),"\n",(0,i.jsx)(n.li,{children:"Branch chain light client contract"}),"\n",(0,i.jsx)(n.li,{children:"Branch chain challenge contract"}),"\n",(0,i.jsx)(n.li,{children:"DA layer verification contract"}),"\n",(0,i.jsx)(n.li,{children:"Extended xUDT contract - universal user defined token (uUDT)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"customizing-branch-chains",children:"Customizing Branch Chains"}),"\n",(0,i.jsx)(n.p,{children:"The Branch chain can be configured to allow cross-chain assets to be used as transaction fees. For example, in a BTC scaling scenario, using Bitcoin as transaction fee can provide a consistent user experience."})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>r});var i=a(6540);const t={},c=i.createContext(t);function s(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);